JSSAlertView.swift
	class JSSAlertView: UIViewController
	var containerView:UIView!
	var alertBackgroundView:UIView!
	var dismissButton:UIButton!
	var cancelButton:UIButton!
	var buttonLabel:UILabel!
	var cancelButtonLabel:UILabel!
	var titleLabel:UILabel!
	var textView:UITextView!
	var rootViewController:UIViewController!
	var iconImage:UIImage!
	var iconImageView:UIImageView!
	var closeAction:(()->Void)!
	var isAlertOpen:Bool = false
	enum FontType
	var titleFont = "HelveticaNeue-Light"
	var textFont = "HelveticaNeue"
	var buttonFont = "HelveticaNeue-Bold"
	var defaultColor = UIColorFromHex(0xF2F4F4, alpha: 1)
	enum TextColorTheme
	var darkTextColor = UIColorFromHex(0x000000, alpha: 0.75)
	var lightTextColor = UIColorFromHex(0xffffff, alpha: 0.9)
	let baseHeight:CGFloat = 160.0
	var alertWidth:CGFloat = 290.0
	let buttonHeight:CGFloat = 70.0
	let padding:CGFloat = 20.0
	var viewWidth:CGFloat?
	var viewHeight:CGFloat?
	class JSSAlertViewResponder
	let alertview: JSSAlertView
	init(alertview: JSSAlertView)
	func addAction(action: ()->Void)
	func setTitleFont(fontStr: String)
	func setTextFont(fontStr: String)
	func setButtonFont(fontStr: String)
	func setTextTheme(theme: TextColorTheme)
	func close()
	func setFont(fontStr: String, type: FontType)
	func setTextTheme(theme: TextColorTheme)
	func recolorText(color: UIColor)
	required init(coder aDecoder: NSCoder)
	required override init()
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?)
	override func didReceiveMemoryWarning()
	override func viewDidLayoutSubviews()
	func info(viewController: UIViewController, title: String, text: String?=nil, buttonText: String?=nil, cancelButtonText: String?=nil) -> JSSAlertViewResponder
	func success(viewController: UIViewController, title: String, text: String?=nil, buttonText: String?=nil, cancelButtonText: String?=nil) -> JSSAlertViewResponder
	func warning(viewController: UIViewController, title: String, text: String?=nil, buttonText: String?=nil, cancelButtonText: String?=nil) -> JSSAlertViewResponder
	func danger(viewController: UIViewController, title: String, text: String?=nil, buttonText: String?=nil, cancelButtonText: String?=nil) -> JSSAlertViewResponder
	func show(viewController: UIViewController, title: String, text: String?=nil, buttonText: String?=nil, cancelButtonText: String?=nil, color: UIColor?=nil, iconImage: UIImage?=nil) -> JSSAlertViewResponder
	func addAction(action: ()->Void)
	func buttonTap()
	func cancelButtonTap()
	func closeView(withCallback:Bool)
	func removeView()
	class func withColor(color: UIColor) -> UIImage
	func UIColorFromHex(rgbValue:UInt32, alpha:Double=1.0)->UIColor
	func adjustBrightness(color:UIColor, amount:CGFloat) -> UIColor
HeaderShadowView.swift
	class HeaderShadowView: UIView
	override class func layerClass() -> AnyClass
	override init(frame: CGRect)
	required init(coder aDecoder: NSCoder)
PersonCell.swift
	class PersonCell: UITableViewCell
	var person: Person!
	func downloadImage(notification: NSNotification)
	deinit
SplashViewController.swift
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func viewWillAppear(animated: Bool)
	override func viewDidAppear(animated: Bool)
	func toggleView()
	func showUserLoggedInView()
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
RoomDetailViewController.swift
	var room: Room!
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	@IBAction func didClickOnBackButton(sender: UIBarButtonItem)
	func numberOfSectionsInTableView(tableView: UITableView) -> Int
	func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String?
	func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell
	func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int
	func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat
MenuView.swift
	public class MenuView: StickyHeaderView
	public override init(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: DefaultContentHeight))
	required public init(coder aDecoder: NSCoder)
	override func commonInit()
	public weak var delegate: MenuViewDelegate?
	public var items: [MenuItem] = []
	public var selectedIndex: Int? = 0
	public override var contentHeight: CGFloat
	public class MenuView : StickyHeaderView
	public func frameOfItemAtIndex(index: Int) -> CGRect
	public class MenuView : StickyHeaderView
	public func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
	public func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell
	public class MenuView : StickyHeaderView
	public func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath)
StickyHeaderView.swift
	public class StickyHeaderView: UIView
	func commonInit()
	public override init(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: DefaultContentHeight))
	required public init(coder aDecoder: NSCoder)
	deinit
	public override func willMoveToSuperview(newSuperview: UIView?)
	public override func didMoveToSuperview()
	public var contentView: UIView?
	public var backgroundImage: UIImage?
	public override func observeValueForKeyPath(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer<Void>)
	public var revealed: Bool = false
	public func setRevealed(revealed: Bool, animated: Bool)
	public var contentHeight: CGFloat = DefaultContentHeight
	public var threshold: CGFloat = 0.3
	public override func layoutSubviews()
	public override func sizeThatFits(_: CGSize) -> CGSize
Alamofire.swift
	func queryComponents(key: String, _ value: AnyObject) -> [(String, String)]
	func escape(string: String) -> String
	public var URLString: String
	public var URLString: String
	public var URLString: String
	public var URLString: String
	public var URLRequest: NSURLRequest
	struct Singleton
	static var configuration: NSURLSessionConfiguration =
	static let instance = Manager(configuration: configuration)
	required public init(configuration: NSURLSessionConfiguration? = nil)
	class SessionDelegate: NSObject, NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate
	var sessionDidBecomeInvalidWithError: ((NSURLSession!, NSError!) -> Void)?
	var sessionDidFinishEventsForBackgroundURLSession: ((NSURLSession!) -> Void)?
	var sessionDidReceiveChallenge: ((NSURLSession!, NSURLAuthenticationChallenge) -> (NSURLSessionAuthChallengeDisposition, NSURLCredential!))?
	var taskWillPerformHTTPRedirection: ((NSURLSession!, NSURLSessionTask!, NSHTTPURLResponse!, NSURLRequest!) -> (NSURLRequest!))?
	var taskDidReceiveChallenge: ((NSURLSession!, NSURLSessionTask!, NSURLAuthenticationChallenge) -> (NSURLSessionAuthChallengeDisposition, NSURLCredential?))?
	var taskDidSendBodyData: ((NSURLSession!, NSURLSessionTask!, Int64, Int64, Int64) -> Void)?
	var taskNeedNewBodyStream: ((NSURLSession!, NSURLSessionTask!) -> (NSInputStream!))?
	var dataTaskDidReceiveResponse: ((NSURLSession!, NSURLSessionDataTask!, NSURLResponse!) -> (NSURLSessionResponseDisposition))?
	var dataTaskDidBecomeDownloadTask: ((NSURLSession!, NSURLSessionDataTask!) -> Void)?
	var dataTaskDidReceiveData: ((NSURLSession!, NSURLSessionDataTask!, NSData!) -> Void)?
	var dataTaskWillCacheResponse: ((NSURLSession!, NSURLSessionDataTask!, NSCachedURLResponse!) -> (NSCachedURLResponse))?
	var downloadTaskDidFinishDownloadingToURL: ((NSURLSession!, NSURLSessionDownloadTask!, NSURL) -> (NSURL))?
	var downloadTaskDidWriteData: ((NSURLSession!, NSURLSessionDownloadTask!, Int64, Int64, Int64) -> Void)?
	var downloadTaskDidResumeAtOffset: ((NSURLSession!, NSURLSessionDownloadTask!, Int64, Int64) -> Void)?
	required override init()
	func URLSession(session: NSURLSession!, didBecomeInvalidWithError error: NSError!)
	func URLSession(session: NSURLSession!, didReceiveChallenge challenge: NSURLAuthenticationChallenge!, completionHandler: ((NSURLSessionAuthChallengeDisposition, NSURLCredential!) -> Void)!)
	func URLSessionDidFinishEventsForBackgroundURLSession(session: NSURLSession!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, willPerformHTTPRedirection response: NSHTTPURLResponse!, newRequest request: NSURLRequest!, completionHandler: ((NSURLRequest!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didReceiveChallenge challenge: NSURLAuthenticationChallenge!, completionHandler: ((NSURLSessionAuthChallengeDisposition, NSURLCredential!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, needNewBodyStream completionHandler: ((NSInputStream!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didSendBodyData bytesSent: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didCompleteWithError error: NSError!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveResponse response: NSURLResponse!, completionHandler: ((NSURLSessionResponseDisposition) -> Void)!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didBecomeDownloadTask downloadTask: NSURLSessionDownloadTask!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveData data: NSData!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, willCacheResponse proposedResponse: NSCachedURLResponse!, completionHandler: ((NSCachedURLResponse!) -> Void)!)
	func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didFinishDownloadingToURL location: NSURL)
	func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didWriteData bytesWritten: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)
	func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didResumeAtOffset fileOffset: Int64, expectedTotalBytes: Int64)
	override func respondsToSelector(selector: Selector) -> Bool
	class TaskDelegate: NSObject, NSURLSessionTaskDelegate
	let task: NSURLSessionTask
	let queue: dispatch_queue_t
	let progress: NSProgress
	var data: NSData?
	private(set) var error: NSError?
	var credential: NSURLCredential?
	var taskWillPerformHTTPRedirection: ((NSURLSession!, NSURLSessionTask!, NSHTTPURLResponse!, NSURLRequest!) -> (NSURLRequest!))?
	var taskDidReceiveChallenge: ((NSURLSession!, NSURLSessionTask!, NSURLAuthenticationChallenge) -> (NSURLSessionAuthChallengeDisposition, NSURLCredential?))?
	var taskDidSendBodyData: ((NSURLSession!, NSURLSessionTask!, Int64, Int64, Int64) -> Void)?
	var taskNeedNewBodyStream: ((NSURLSession!, NSURLSessionTask!) -> (NSInputStream!))?
	init(task: NSURLSessionTask)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, willPerformHTTPRedirection response: NSHTTPURLResponse!, newRequest request: NSURLRequest!, completionHandler: ((NSURLRequest!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didReceiveChallenge challenge: NSURLAuthenticationChallenge!, completionHandler: ((NSURLSessionAuthChallengeDisposition, NSURLCredential!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, needNewBodyStream completionHandler: ((NSInputStream!) -> Void)!)
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didCompleteWithError error: NSError!)
	class DataTaskDelegate: TaskDelegate, NSURLSessionDataDelegate
	var dataTask: NSURLSessionDataTask!
	override var data: NSData?
	var dataTaskDidReceiveResponse: ((NSURLSession!, NSURLSessionDataTask!, NSURLResponse!) -> (NSURLSessionResponseDisposition))?
	var dataTaskDidBecomeDownloadTask: ((NSURLSession!, NSURLSessionDataTask!) -> Void)?
	var dataTaskDidReceiveData: ((NSURLSession!, NSURLSessionDataTask!, NSData!) -> Void)?
	var dataTaskWillCacheResponse: ((NSURLSession!, NSURLSessionDataTask!, NSCachedURLResponse!) -> (NSCachedURLResponse))?
	var dataProgress: ((bytesReceived: Int64, totalBytesReceived: Int64, totalBytesExpectedToReceive: Int64) -> Void)?
	override init(task: NSURLSessionTask)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveResponse response: NSURLResponse!, completionHandler: ((NSURLSessionResponseDisposition) -> Void)!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didBecomeDownloadTask downloadTask: NSURLSessionDownloadTask!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveData data: NSData!)
	func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, willCacheResponse proposedResponse: NSCachedURLResponse!, completionHandler: ((NSCachedURLResponse!) -> Void)!)
	class UploadTaskDelegate: DataTaskDelegate
	var uploadTask: NSURLSessionUploadTask!
	var uploadProgress: ((Int64, Int64, Int64) -> Void)!
	func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didSendBodyData bytesSent: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)
	class DownloadTaskDelegate: TaskDelegate, NSURLSessionDownloadDelegate
	var downloadTask: NSURLSessionDownloadTask!
	var downloadProgress: ((Int64, Int64, Int64) -> Void)?
	var resumeData: NSData?
	override var data: NSData?
	var downloadTaskDidFinishDownloadingToURL: ((NSURLSession!, NSURLSessionDownloadTask!, NSURL) -> (NSURL))?
	var downloadTaskDidWriteData: ((NSURLSession!, NSURLSessionDownloadTask!, Int64, Int64, Int64) -> Void)?
	var downloadTaskDidResumeAtOffset: ((NSURLSession!, NSURLSessionDownloadTask!, Int64, Int64) -> Void)?
	func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didFinishDownloadingToURL location: NSURL)
	func URLSession(session: NSURLSession!, downloadTask: NSURLSessionDownloadTask!, didWriteData bytesWritten: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)
	func URLSession(session: NSURLSession!, downloadTask: NSURLSessionDownloadTask!, didResumeAtOffset fileOffset: Int64, expectedTotalBytes: Int64)
	func cURLRepresentation() -> String
	class func imageResponseSerializer() -> Serializer
	func responseImage(completionHandler: (NSURLRequest, NSHTTPURLResponse?, UIImage?, NSError?) -> Void) -> Self
NSURL.h
	class NSURL : NSObject, NSSecureCoding, NSCoding, NSCopying
	class NSURLComponents : NSObject, NSCopying
WalkthroughViewController.swift
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
MenuViewDelegate.swift
	public protocol MenuViewDelegate
	func menu(menu: MenuView, didSelectItemAtIndex index: Int) -> Void
NetworkManager.swift
	func urlFormating(urlString:String,withImageData imageData:NSData) -> (newUrl: URLRequestConvertible, data: NSData)
AppDelegate.swift
	class AppDelegate: UIResponder, UIApplicationDelegate
	var window: UIWindow?
	func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool
	func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject?) -> Bool
	func applicationWillResignActive(application: UIApplication)
	func applicationDidEnterBackground(application: UIApplication)
	func applicationWillEnterForeground(application: UIApplication)
	func applicationDidBecomeActive(application: UIApplication)
	func applicationWillTerminate(application: UIApplication)
	func doInMainQueueAfter(#seconds: Float, completionHandler: () -> Void)
AddRoomViewController.swift
	class AddRoomViewController: UIViewController
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	@IBAction func addRoom()
	override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
	func hasRoomInformations() -> Bool
	func canAddRoomButtonBeEnabled() -> Bool
	class AddRoomViewController : UIViewController
	func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange,
        replacementString string: String) -> Bool
	func textFieldShouldClear(textField: UITextField) -> Bool
	func textFieldDidBeginEditing(textField: UITextField) -> Bool
	func textFieldShouldReturn(textField: UITextField) -> Bool
	class AddRoomViewController : UIViewController
	func textViewDidBeginEditing(textView: UITextView)
UIScrollView+NormalizedContentOffset.swift
	var normalizedContentOffset: CGPoint
SignUpViewController.swift
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
	func showPopupSomethingWrong()
	func userHasSignedUp()
	func imagePickerController(picker: UIImagePickerController!, didFinishPickingImage image: UIImage!,
        editingInfo: [NSObject : AnyObject]!)
	func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange,
        replacementString string: String) -> Bool
	func textFieldDidBeginEditing(textField: UITextField)
	func textFieldShouldClear(textField: UITextField) -> Bool
	func textFieldShouldReturn(textField: UITextField) -> Bool
SwiftyJSON.swift
	public struct JSON
	public init(data:NSData, options opt: NSJSONReadingOptions = .AllowFragments, error: NSErrorPointer = nil)
	public init(_ object: AnyObject)
	public struct JSON
	public struct JSON
	public struct JSON
	public func userExist() -> Bool
	public func emailExist() -> Bool
	public func userHasBeenRegistered() -> Bool
	public func schoolExist() -> Bool
	public struct JSON
	public init(stringLiteral value: StringLiteralType)
	public init(extendedGraphemeClusterLiteral value: StringLiteralType)
	public init(unicodeScalarLiteral value: StringLiteralType)
	public struct JSON
	public init(integerLiteral value: IntegerLiteralType)
	public struct JSON
	public init(booleanLiteral value: BooleanLiteralType)
	public struct JSON
	public init(floatLiteral value: FloatLiteralType)
	public struct JSON
	public init(dictionaryLiteral elements: (String, AnyObject)...)
	public struct JSON
	public init(arrayLiteral elements: AnyObject...)
	public struct JSON
	public init(nilLiteral: ())
	public struct JSON
	public init?(rawValue: AnyObject)
	public var rawValue: AnyObject
	public func rawData(options opt: NSJSONWritingOptions = NSJSONWritingOptions(0), error: NSErrorPointer = nil) -> NSData?
	public func rawString(encoding: UInt = NSUTF8StringEncoding, options opt: NSJSONWritingOptions = .PrettyPrinted) -> String?
	public struct JSON
	public var description: String
	public var debugDescription: String
	public struct JSON
	public var array: [JSON]?
	public var arrayValue: [JSON]
	public var arrayObject: [AnyObject]?
	public struct JSON
	public var dictionary: [String : JSON]?
	public var dictionaryValue: [String : JSON]
	public var dictionaryObject: [String : AnyObject]?
	public struct JSON
	public var bool: Bool?
	public var boolValue: Bool
	public struct JSON
	public var string: String?
	public var stringValue: String
	public struct JSON
	public var number: NSNumber?
	public var numberValue: NSNumber
	public struct JSON
	public var null: NSNull?
	public struct JSON
	public var URL: NSURL?
	public struct JSON
	public var double: Double?
	public var doubleValue: Double
	public var float: Float?
	public var floatValue: Float
	public var int: Int?
	public var intValue: Int
	public var uInt: UInt?
	public var uIntValue: UInt
	public var int8: Int8?
	public var int8Value: Int8
	public var uInt8: UInt8?
	public var uInt8Value: UInt8
	public var int16: Int16?
	public var int16Value: Int16
	public var uInt16: UInt16?
	public var uInt16Value: UInt16
	public var int32: Int32?
	public var int32Value: Int32
	public var uInt32: UInt32?
	public var uInt32Value: UInt32
	public var int64: Int64?
	public var int64Value: Int64
	public var uInt64: UInt64?
	public var uInt64Value: UInt64
	public struct JSON
	public func ==(lhs: JSON, rhs: JSON) -> Bool
	public func <=(lhs: JSON, rhs: JSON) -> Bool
	public func >=(lhs: JSON, rhs: JSON) -> Bool
	public func >(lhs: JSON, rhs: JSON) -> Bool
	public func <(lhs: JSON, rhs: JSON) -> Bool
	var isBool:Bool
	public func ==(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func !=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public struct JSON
	public init(object: AnyObject)
	public var dictionaryObjects: [String : AnyObject]?
	public var arrayObjects: [AnyObject]?
	public var char: Int8?
	public var charValue: Int8
	public var unsignedChar: UInt8?
	public var unsignedCharValue: UInt8
	public var short: Int16?
	public var shortValue: Int16
	public var unsignedShort: UInt16?
	public var unsignedShortValue: UInt16
	public var long: Int?
	public var longValue: Int
	public var unsignedLong: UInt?
	public var unsignedLongValue: UInt
	public var longLong: Int64?
	public var longLongValue: Int64
	public var unsignedLongLong: UInt64?
	public var unsignedLongLongValue: UInt64
	public var integer: Int?
	public var integerValue: Int
	public var unsignedInteger: Int?
	public var unsignedIntegerValue: Int
NSValue.h
	class NSNumber : NSValue
PersistencyManager.swift
	func encodeWithCoder(aCoder: NSCoder)
	init()
	required init(coder aDecoder: NSCoder)
	func addRoomsFromJSON(schoolRooms: JSON)
	static var menuPlist: NSDictionary =
MenuCell.swift
	class MenuCell: UICollectionViewCell
	override init(frame: CGRect)
	required init(coder aDecoder: NSCoder)
	override func prepareForReuse()
	var object: MenuItem?
	override var selected: Bool
DeviceInformation.swift
	class DeviceInformation
	class func isIphone5() -> Bool
ProfileViewController.swift
	class ProfileViewController: UIViewController
	override func viewDidLoad()
	override func didReceiveMemoryWarning()
	@IBAction func didClickOnBackButton(sender: UIBarButtonItem)
	@IBAction func updateUserAccount()
	override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
	func showPopupSomethingWrong()
	func userHasUpdatedProfil()
	class ProfileViewController : UIViewController
	func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange,
        replacementString string: String) -> Bool
	func textFieldShouldClear(textField: UITextField) -> Bool
	func textFieldShouldReturn(textField: UITextField) -> Bool
	func textFieldDidBeginEditing(textField: UITextField) -> Bool
	class ProfileViewController : UIViewController
	func imagePickerController(picker: UIImagePickerController!, didFinishPickingImage image: UIImage!,
        editingInfo: [NSObject : AnyObject]!)
LocationManager.swift
	override init()
	func startMonitoringBeacon(beacon: Beacon)
	func stopMonitoringBeacon(beacon: Beacon)
	func locationManager(manager: CLLocationManager!, didRangeBeacons beacons: [AnyObject]!,
        inRegion region: CLBeaconRegion!)
	func locationManager(manager: CLLocationManager!, didFailWithError error: NSError!)
	func locationManager(manager: CLLocationManager!, monitoringDidFailForRegion region: CLRegion!, withError error: NSError!)
	func locationManager(manager: CLLocationManager!, didDetermineState state: CLRegionState, forRegion region: CLRegion!)
	func locationManager(manager: CLLocationManager!, didEnterRegion region: CLRegion!)
	func locationManager(manager: CLLocationManager!, didExitRegion region: CLRegion!)
	func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus)
Facade.swift
	struct Singleton
	static let instance = Facade()
	public func isUserAdmin() -> Bool
AuthenticationViewController.swift
	override func viewDidLoad()
	override func viewWillAppear(animated: Bool)
	override func didReceiveMemoryWarning()
	override func touchesBegan(touches: NSSet, withEvent event: UIEvent)
	@IBAction func didClickOnMenuBarButtonIem()
	func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange,
        replacementString string: String) -> Bool
	func textFieldDidBeginEditing(textField: UITextField)
	func textFieldShouldClear(textField: UITextField) -> Bool
	func textFieldShouldReturn(textField: UITextField) -> Bool
	func loginViewFetchedUserInfo(loginView: FBLoginView!, user: FBGraphUser!)
	func loginView(loginView: FBLoginView!, handleError error: NSError!)
	func finishedWithAuth(auth: GTMOAuth2Authentication!, error: NSError!)
CLRegion.h
	enum CLProximity : Int
CLProximityExtension.swift
	func toString() -> String
RoomsListViewController.swift
	enum MenuAction: Int
	override func viewDidLoad()
	override func viewWillAppear(animated: Bool)
	override func didReceiveMemoryWarning()
	@IBAction func showMenu(sender: UIBarButtonItem)
	@IBAction func refreshRooms(sender: UIBarButtonItem)
	override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)
	func menu(menu: MenuView, didSelectItemAtIndex index: Int) -> Void
	func numberOfSectionsInTableView(tableView: UITableView) -> Int
	func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell
	func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int
	func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat
RoomCell.swift
	class RoomCell: UITableViewCell
	@IBOutlet var roomDescription: UILabel!
	var themeColor: UIColor!
	var room: Room!
Beacon.swift
	private(set) var name: String! = ""
	private(set) var region: CLBeaconRegion!
	init(name: String, uuid: NSUUID, major: CLBeaconMajorValue, minor: CLBeaconMinorValue)
	required public init(coder aDecoder: NSCoder)
	public func encodeWithCoder(aCoder: NSCoder)
	override public var description: String
	func == (left: Beacon, right: CLBeacon) -> Bool
UIColor.h
	class UIColor : NSObject, NSSecureCoding, NSCoding, NSCopying
UIColorExtension.swift
	class func randomFlatColor() -> UIColor
	struct RandomColors
	static let colors: [ColorTuple] = [
UIGeometry.h
	struct UIEdgeInsets
UIEdgeInsets+Equatable.swift
	public func == (lhs: UIEdgeInsets, rhs: UIEdgeInsets) -> Bool
	public func + (lhs: UIEdgeInsets, rhs: UIEdgeInsets) -> UIEdgeInsets
	public func - (lhs: UIEdgeInsets, rhs: UIEdgeInsets) -> UIEdgeInsets
Member.swift
	class Member: Person
	required init(firstName: String?, lastName: String?, email: String?,  formation: String?,
        schoolId: String?, schoolName: String?, isAdmin: Bool?, profilPicture: UIImage?)
	required init(coder aDecoder: NSCoder)
	class func sharedInstance() -> Member
	struct Singleton
	static var instance = Member(   firstName: session.objectForKey("firstName") as? String,
	func fillMemberProfilWithJSON(userProfil: JSON)
Room.swift
	let identifier: Int!
	let title: String!
	let roomDescription: String?
	let capacity: Int?
	let beacon: Beacon!
	lazy var persons: [Person] = [Person]()
	init(jsonRoom: JSON)
	required public init(coder aDecoder: NSCoder)
	public func encodeWithCoder(aCoder: NSCoder)
Person.swift
	class Person: NSObject
	var firstName: String?
	var lastName: String?
	var email: String?
	var formation: String?
	var schoolId: String?
	var isAdmin: Bool? = false
	var schoolName: String?
	var profilPicture: UIImage?
	init (jsonPerson: JSON)
	required init(firstName: String?, lastName: String?, email: String?,  formation: String?,
        schoolId: String?, schoolName: String?, isAdmin: Bool?, profilPicture: UIImage?)
	required init(coder aDecoder: NSCoder)
	class Person : NSObject
	func encodeWithCoder(aCoder: NSCoder)
	class Person : NSObject
	func fullName() -> String
MenuItem.swift
	public struct MenuItem
	public var image: UIImage
	public var highlightedImage: UIImage?
	public var backgroundColor = UIColor.whiteColor()
	public var highlightedBackgroundColor =  UIColor.whiteColor()
	public var shadowColor = UIColor(white: 0.1, alpha: 0.3)
	public init(image: UIImage, highlightedImage: UIImage? = nil)
